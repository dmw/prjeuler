----------------------------------------------------------------------------
-- |
-- Module      :  Main
-- Copyright   :  (c) Daniel Molina Wegener 2012
-- License     :  BSD 3 (see the LICENSE file)
-- Author      :  Daniel Molina Wegener <dmw@coder.cl>
-- Homepage    :  https://github.com/dmw/prjeuler
-- Repository  :  https://github.com/dmw/prjeuler
--
-- Project Euler, Problem 002.
--
-- Each new term in the Fibonacci sequence is generated by adding
-- the previous two terms. By starting with 1 and 2, the first 10
-- terms will be:
--
-- 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
--
-- By considering the terms in the Fibonacci sequence whose values
-- do not exceed four million, find the sum of the even-valued terms.
-----------------------------------------------------------------------------


module Main (main) where

import System.Environment (getArgs)

-- | Calculates the Fibonacci Term N using the Binet's Formula.
fib :: Int              -- ^ Term Number to Calculate.
       -> Int
fib n = round $ phi ** fromIntegral n / sq5
        where sq5 = sqrt 5 :: Double
              phi = (1 + sq5) / 2

-- | Sum the even values on the sequence given by limits n and m
fibEvenSum :: Int       -- ^ Lower bound of the Fibonacci sequence.
              -> Int    -- ^ Upper bound of the Fibonacci sequence.
              -> Int    -- ^ Recursive Sum context.
              -> Int    -- ^ Returning Sum.
fibEvenSum n m r | fib n >= m = r
                 | even $ fib n = n `seq` r `seq`
                                  fibEvenSum (n + 1) m (r + fib n)
                 | otherwise = n `seq` r `seq`
                               fibEvenSum (n + 1) m r

-- | Main Function. It reads the first argument as Integer
-- and uses it as upper bound of the Fibonacci sequence,
-- starting from 1.
main :: IO ()
main = do [x] <- getArgs
          print $ fibEvenSum 1 (read x) 0

