----------------------------------------------------------------------------
-- |
-- Module      :  Main
-- Copyright   :  (c) Daniel Molina Wegener 2012
-- License     :  BSD 3 (see the LICENSE file)
-- Author      :  Daniel Molina Wegener <dmw@coder.cl>
-- Homepage    :  https://github.com/dmw/prjeuler
-- Repository  :  https://github.com/dmw/prjeuler
--
-- Project Euler, Problem 002.
--
-- Each new term in the Fibonacci sequence is generated by adding
-- the previous two terms. By starting with 1 and 2, the first 10
-- terms will be:
--
-- 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
--
-- By considering the terms in the Fibonacci sequence whose values
-- do not exceed four million, find the sum of the even-valued terms.
-----------------------------------------------------------------------------


module Main (main) where


import Data.Bits
import Data.List
import System.Environment (getArgs)


-- | Calculates the Fibonacci Term N
fib :: Int                      -- ^ Term to calculate
       -> Integer
fib n = snd . foldl' fib' (1, 0) . dropWhile not $
        [testBit n k | k <- let s = bitSize n in [s - 1, s - 2 .. 0]]
  where
    fib' (f, g) p
      | p         = (f * (f + 2 * g), ss)
      | otherwise = (ss, g * (2 * f - g))
      where ss = f * f + g * g

-- | Sum the even values on the sequence given by limits n and m
fibEvenSum :: Int               -- ^ Lower bound of the Fibonacci sequence.
              -> Integer        -- ^ Upper bound of the Fibonacci sequence.
              -> Integer        -- ^ Recursive Sum context.
              -> Integer        -- ^ Returning Sum.
fibEvenSum n m r | fib n >= m = r
                 | even $ fib n = n `seq` r `seq`
                                  fibEvenSum (n + 1) m (r + fib n)
                 | otherwise = n `seq` r `seq`
                               fibEvenSum (n + 1) m r

-- | Main Function. It reads the first argument as Integer
-- and uses it as upper bound of the Fibonacci sequence,
-- starting from 1.
main :: IO ()
main = do [x] <- getArgs
          print $ fibEvenSum 1 (read x) 0

