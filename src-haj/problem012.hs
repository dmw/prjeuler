-- Project Euler
--
-- Problem 012
--
-- The sequence of triangle numbers is generated by 
-- adding the natural numbers. 
-- So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
-- 
-- The first ten terms would be:
-- 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
-- 
-- Let us list the factors of the first seven triangle numbers:
-- 
--  1: 1
--  3: 1,3
--  6: 1,2,3,6
-- 10: 1,2,5,10
-- 15: 1,3,5,15
-- 21: 1,3,7,21
-- 28: 1,2,4,7,14,28
-- We can see that 28 is the first triangle number to have over five divisors.
--
-- What is the value of the first triangle number to have over five hundred divisors?
--
-- Usage:
-- $ ./problem012 500
-- <Result Here>

module Main where
import System.Environment (getArgs)

findNumber :: Integer -> Integer
findNumber d = fNAux 1 d

fNAux :: Integer -> Integer -> Integer
fNAux x d
    | ((countDivisors y) >= d) = y
    | otherwise                = fNAux (x + 1) d
    where y = (x * (x + 1)) `div` 2

countDivisors :: Integer -> Integer
countDivisors n = cDAux n n 0

cDAux :: Integer -> Integer -> Integer -> Integer
cDAux 0 _ acc = acc
cDAux x n acc
    | (n `mod` x == 0)  = cDAux (x - 1) n (acc + 1)
    | otherwise         = cDAux (x - 1) n acc

main = do i <- getArgs
          print (findNumber $ read $ head $ i)
